@model SGFastFlyers.ViewModels.CreateOrderViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Place an Order</h2>
@using (Html.BeginForm("Create", "Orders", FormMethod.Post,
                                    new
                                    {
                                        enctype = "multipart/form-data"
                                    }))
{
    @Html.AntiForgeryToken()
    <style>
        div.absolute {
            position: absolute;
            bottom: 10px;
        }
    </style>

    <div class="row">
        <div class="col-md-8">
            <h4>Please fill in the details below to create an order. <br />Already have an account? Please logon via the top right hand corner.</h4>
            <hr />
            <div class="row">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div><br />
                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div><br />
                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.EmailAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.EmailAddress, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div><br />

                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div><br />

                <div class="row">
                    <div class="form-group" oninput="setQuotePrice();">
                        @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div><br />

                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.DeliveryDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.DeliveryDate, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.DeliveryDate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div><br />

                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.DeliveryArea, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.DeliveryArea, new { htmlAttributes = new { @class = "form-control", @Placeholder = "Suburbs or post codes for delivery." } })
                            @Html.ValidationMessageFor(model => model.DeliveryArea, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div><br />

                <div class="row">
                    <div class="form-group" onclick="setQuotePrice();">
                        @Html.LabelFor(model => model.IsMetro, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.CheckBoxFor(model => model.IsMetro, htmlAttributes: new { @checked = true, @class = "form-control", @onchange = "checkandChange()", @value = "true" })
                            @Html.ValidationMessageFor(model => model.IsMetro, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div><br />

                <div class="row">
                    <div class="form-group" id="NeedsPrintCheckBox" onclick="setQuotePrice();">
                        @Html.LabelFor(model => model.NeedsPrint, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.CheckBoxFor(model => model.NeedsPrint, htmlAttributes: new { @class = "form-control", @onchange = "checkandChange()" })
                            @Html.ValidationMessageFor(model => model.NeedsPrint, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div><br />

                <div class="row">
                    <div class="form-group" id="PrintSize1" style="display: none;" onclick="setQuotePrice();">
                        @Html.LabelFor(model => model.PrintSize, htmlAttributes: new { @class = "control-label col-md-2", @title = "Choose DL (99mm × 210mm, 1/3 A4) or A5 (148mm X 210mm, 1/2 A4). For other sizes please contact us for a quote." })
                        <div class="col-md-10">
                            @Html.EnumDropDownListFor(model => model.PrintSize, "-Please select-", htmlAttributes: new { @class = "form-control", @onchange = "checkandChange()", @title = "Choose DL (99mm × 210mm, 1/3 A4) or A5 (148mm X 210mm, 1/2 A4). For other sizes please contact us for a quote." })
                            @Html.ValidationMessageFor(model => model.PrintSize, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div><br />

                <div class="row ">
                    <div class="form-group" id="PrintFormat" style="display: none;" onclick="setQuotePrice();">
                        @Html.LabelFor(model => model.PrintFormat, htmlAttributes: new { @class = "control-label col-md-2", @title = "Leave ticked if you would like to print on both sides. Untick for only one sided printing." })
                        <div class="col-md-10">
                            @Html.CheckBoxFor(model => model.IsDoubleSided, htmlAttributes: new { @checked = true, @class = "form-control", @onchange = "checkandChange()", @title = "Leave ticked if you would like to print on both sides. Untick for only one sided printing." })
                            @Html.ValidationMessageFor(model => model.IsDoubleSided, "", new { @class = "text-danger" })<br /><br />
                        </div>
                    </div>

                </div><br />

                <div class="row ">
                    <div class="form-group" id="Attachment" style="display: none;">
                        @Html.LabelFor(model => model.Attachment, htmlAttributes: new { @class = "control-label col-md-2", @title = "Attach your file here. Please see file guidelines for requirements." })
                        <div class="col-md-10">
                            @Html.TextBoxFor(model => model.Attachment, new { type = "file", multiple = "true", Placeholder = "Attach Files" })

                        </div>
                    </div>
                </div><br /><br />


                <div class="row">
                    <div class="col-md-2">
                        <label>Your quote price: </label>
                    </div>
                    <div class="col-md-10">
                        <label id="quotePrice" title="Minimum Order of $400"></label><br /><p style="font-size:x-small">(All prices include GST)</p>
                    </div><br /><br />
                    <!--
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <script src="https://checkout.stripe.com/checkout.js" class="stripe-button"
                                    data-key="pk_test_u6SbThe1QxYZHaYUHjCid6og"
                                    data-amount=document.getElementById("quotePrice").innerHTML
                                    data-name="SGFastFlyers.com.au"
                                    data-description="Secure Payment Gateway"
                                    data-image="/Content/Images/logo.jpg"
                                    data-locale="auto"
                                    data-zip-code="true">
                            </script>-->

                    <div class="col-md-offset-2">
                        <script src="https://checkout.stripe.com/checkout.js"></script>
                         
                        <input type="submit" name="customButton" id="customButton" value="Pay by Card" class="btn btn-success" style="background-color:#7FFF00" />

                        <script>
                var handler = StripeCheckout.configure({
                  key: '@SGFastFlyers.Utility.Config.stripeKey',
                  image: 'https://stripe.com/img/documentation/checkout/marketplace.png',
                  locale: 'auto',
                  token: function(token) {
                      document.getElementById("tocken1").value = token.id;
                     // alert(token.id);
                      document.forms[0].submit();
                      return true;

                    // You can access the token ID with `token.id`.
                      // Get the token ID to your server-side code for use.

                  }
                });

                            document.getElementById('customButton').addEventListener('click', function(e) {
                                var $form = $('form');
                                if($form.valid()) {
                       
                                }else{
                                    return false;
                                }
                    // Open Checkout with further options:
                    var thisEmail = document.getElementById("EmailAddress");
                    var amounbt = setQuotePrice();
                    amounbt = amounbt.replace(/\./gi, "");
                    amounbt = amounbt.replace(/\$/gi, "");
                    amounbt = amounbt.replace(/\,/gi, "");
                   // alert(thisEmail.value);
                  handler.open({
                    name: 'Smooth Glass Pty Ltd',
                    description: 'Secure Payment Gateway',
                    zipCode: true,
                    currency: 'aud',
                    email:thisEmail.value,
                    image:"/Content/Images/logo.jpg",
                    amount: amounbt
                  });
                  e.preventDefault();
                },true);

                // Close Checkout on page navigation:
                window.addEventListener('popstate', function() {
                    handler.close();
                });
                        </script>
                        <input type="hidden" value="" name="tocken1" id="tocken1" />

                        <input type="submit" name="directDebitEmail" value="Pay by Direct Debit" class="btn btn-success" style="background-color:#7FFF00" />
                    </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4" style="height:600px; ">
                <div class="absolute">
                    <p class="full-circle"></p><br />
                    <p class="full-circle-med col-md-offset-2"></p><br />
                    <p class="full-circle-sm"></p>
                    <img class="img-responsive" style="height:300px" src="~/Content/Images/Flyers.jpg" alt="logo" />
                </div>
            </div>
        </div>
        <div class="col-md-4">
            
        </div>
        <script type="text/javascript">

        $(function(){
            $('input').keydown(function(e){
                if (e.keyCode == 13) {
                    $("input[value='emailQuote']").focus();
                    return false;
                }
            });
        });
        </script>
        <script type="text/javascript">
            function checkandChange()
            {
                var checkbox = document.getElementById('NeedsPrint');
                var dependent =  $('#PrintSize1');
                var dependent2 =   $('#PrintFormat');
                var dependent3 = $('#Attachment')
                if (checkbox.checked) {
                    dependent.show();
                    dependent2.show();
                    dependent3.show();
                }
                else {
                    dependent.hide();
                    dependent2.hide();
                    dependent3.hide();
                }
            }

            $(document).ready(function () {
                checkandChange();
            });
        </script>

        <script type="text/javascript">
            function setQuotePrice()
            {
                var quantity = 0;
                quantity = (document.getElementById('Quantity').value)/1000;
                var isMetro = document.getElementById('IsMetro').checked;
                var needsPrint = document.getElementById("NeedsPrint").checked;
                var isDoubleSided = document.getElementById("IsDoubleSided").checked;
                var printSize = document.getElementById('PrintSize').value;
                var cost = 0;
                var dlSingleSided = 0;
                var dlDoubleSided = 0;
                var A5SingleSided = 0;
                var A5DoubleSided = 0;

                if(quantity >= 1 && quantity < 20)
                {
                    cost = 50;
                    dlSingleSided = 40;
                    dlDoubleSided = 43;
                    A5SingleSided = 52;
                    A5DoubleSided = 55.9;
                }
                if (quantity >= 20 && quantity < 50)
                {
                    cost = 49;
                    dlSingleSided = 38;
                    dlDoubleSided = 41;
                    A5SingleSided = 49.4;
                    A5DoubleSided = 53.3;
                }
                if (quantity >= 50 && quantity < 75)
                {
                    cost = 48;
                    dlSingleSided = 36;
                    dlDoubleSided = 41;
                    A5SingleSided = 46.8;
                    A5DoubleSided = 53.3;
                }
                if (quantity >= 75 && quantity <= 100)
                {
                    cost = 47;
                    dlSingleSided = 36;
                    dlDoubleSided = 41;
                    A5SingleSided = 46.8;
                    A5DoubleSided = 53.3;
                }
                if (quantity >= 100 && quantity <= 200)
                {
                    cost = 46;
                    dlSingleSided = 34;
                    dlDoubleSided = 38;
                    A5SingleSided = 44.2;
                    A5DoubleSided = 49.4;
                }
                if (quantity >= 200 && quantity < 300)
                {
                    cost = 45;
                    dlSingleSided = 34;
                    dlDoubleSided = 38;
                    A5SingleSided = 44.2;
                    A5DoubleSided = 49.4;
                }
                if (quantity >= 300)
                {
                    cost = 42;
                    dlSingleSided = 32;
                    dlDoubleSided = 36;
                    A5SingleSided = 41.6;
                    A5DoubleSided = 46.8;
                }
                cost = cost * quantity;
                if ( isMetro == false)
                {
                    cost = cost + @SGFastFlyers.Utility.Config.NonMetroAddition();
                }



                if (needsPrint)


                {
                    if (isDoubleSided)

                    {

                        if (printSize == "1")

                        {
                            cost = cost + dlDoubleSided*quantity;
                        }
                        if (printSize == "5")
                        {
                            cost = cost + A5DoubleSided * quantity;
                        }
                    }
                    else
                    {

                        if (printSize == "1")
                        {
                            cost = cost + dlSingleSided * quantity;
                        }

                        if (printSize == "5")
                        {
                            cost = cost + A5SingleSided * quantity;
                        }
                    }
                }
                if (cost < 364)
                {
                    cost = 364;
                }
                //GST
                cost = (cost * 0.1) + cost;
                cost = cost.toLocaleString('aud-AUD', { style: 'currency', currency: 'AUD' });
                document.getElementById("quotePrice").innerHTML = cost;
                return cost;
            }

            window.onload = setQuotePrice();
        </script>
        }

        @section Scripts {
            @Scripts.Render("~/bundles/jqueryval")
        }
