@model SGFastFlyers.ViewModels.CreateOrderViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Place an Order</h2>
@using (Html.BeginForm("Create", "Orders", FormMethod.Post, new
{
    enctype = "multipart/form-data",
    id = "OrdersForm",
    name = "OrdersForm"
}))
{
    @Html.AntiForgeryToken()
    <style>
        div.absolute {
            position: absolute;
            bottom: 10px;
        }
    </style>

    <div class="row">
        <div class="col-sm-8 col-md-8 col-lg-8">
            <h4>Please fill in the details below to create an order. <!--<br />Already have an account? Please logon via the top right hand corner.--></h4>
            <hr />
            <div class="row">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-sm-2 col-md-2 col-lg-2" })
                        <div class="col-sm-10 col-md-10 col-lg-10">
                            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div><br />
                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-sm-2 col-md-2 col-lg-2" })
                        <div class="col-sm-10 col-md-10 col-lg-10">
                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div><br />
                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.EmailAddress, htmlAttributes: new { @class = "control-label col-sm-2 col-md-2 col-lg-2" })
                        <div class="col-sm-10 col-md-10 col-lg-10">
                            @Html.EditorFor(model => model.EmailAddress, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div><br />

                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-sm-2 col-md-2 col-lg-2" })
                        <div class="col-sm-10 col-md-10 col-lg-10">
                            @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div><br />

                <div class="row">
                    <div class="form-group" oninput="QuotePrice.SetQuotePrice();">
                        @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-sm-2 col-md-2 col-lg-2" })
                        <div class="col-sm-10 col-md-10 col-lg-10">
                            @Html.TextBoxFor(model => model.Quantity, htmlAttributes: new { @class = "form-control", Placeholder = "Enter Quantity Here, Minimum 5000" })
                            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div><br />
                <div class="alert alert-dismissible alert-info">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>Heads up! </strong>Standard Delivery starts on a Saturday and will be completed by Wednesday.<br />Please <input id="btnShowDate" type="button" class="btn btn-primary btn-xs" value="Click Here" /> for a full explination of the delivery process.
                </div>
               <div class="modal" id="DeliveryDateInfo">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <span class="close" id="closeDeliveryDate">&times;</span>
                                <h4 class="modal-title">Heads Up! Printing Format.</h4>
                            </div>
                            <div class="modal-body" style="height:700px;position:relative">
                                <iframe src="~/Content/Documents/SGFastFlyers_Delivery_Date_Explained.pdf" style="width: 100%; height: 100%;" frameborder="0" scrolling="no">
                                    <p>It appears your web browser doesn't support iframes.</p>
                                </iframe>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.DeliveryDate, htmlAttributes: new { @class = "control-label col-sm-2 col-md-2 col-lg-2", @title = "Delivery starts on Saturday and will be completed by the following Wednesday." })
                        <div class="col-sm-10 col-md-10 col-lg-10">
                            @Html.EditorFor(model => model.DeliveryDate, new { htmlAttributes = new { @class = "form-control", @placeholder = "Click to Select Delivery Date Here.", @title = "Delivery starts on Saturday and will be completed by the following Wednesday.", @readonly = "true" } })
                            @Html.ValidationMessageFor(model => model.DeliveryDate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div><br />

                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.DeliveryArea, htmlAttributes: new { @class = "control-label col-sm-2 col-md-2 col-lg-2" })
                        <div class="col-sm-10 col-md-10 col-lg-10">
                            @Html.EditorFor(model => model.DeliveryArea, new { htmlAttributes = new { @class = "form-control", @Placeholder = "Suburbs or post codes for delivery." } })
                            @Html.ValidationMessageFor(model => model.DeliveryArea, "", new { @class = "text-danger" })
                            <br />
                            <div id="spinner" style="display:none">
                                <img src="~/Content/themes/base/images/spinner.gif" />
                            </div>
                            <div id="distributionListing" style="display:none;">
                                <div class="col-sm-10 col-md-10 col-lg-10">
                                    <label style="font-weight:bold;float:left;width:85px;">Postcodes : </label> <div id="postCodes"></div>
                                </div>
                                <div class="col-sm-10 col-md-10 col-lg-10">
                                    <label style="font-weight:bold;float:left;width:140px;">Total Houses/Units : </label> <div id="totalUnits"></div>
                                </div>
                                <div class="col-sm-10 col-md-10 col-lg-10">
                                    <input id="resetDeliveryArea" class="btn btn-primary btn-xs" type="button" value="Reset" />
                                </div>
                                <div class="clearfix"></div>
                              </div>
                        </div>
                    </div>
                </div><br />
                <div class="alert alert-dismissible alert-info">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>Heads up! </strong>Metro areas include major cities. For a full list please <a href="~/Content/Documents/SGFastFlyers_Metropolitan _Areas.pdf" target="_blank">Click Here.</a> Thank you.
                </div>
                <div class="row">
                    <div class="form-group" onclick="QuotePrice.SetQuotePrice();">
                        @Html.LabelFor(model => model.IsMetro, htmlAttributes: new { @class = "control-label col-sm-2 col-md-2 col-lg-2" })
                        <div class="col-sm-10 col-md-10 col-lg-10">
                            @Html.CheckBoxFor(model => model.IsMetro, htmlAttributes: new { @checked = true, @class = "form-control", @onchange = "checkandChange()", @value = "true" })
                            @Html.ValidationMessageFor(model => model.IsMetro, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div><br />

                <div class="row">
                    <div class="form-group" id="NeedsPrintCheckBox" onclick="QuotePrice.SetQuotePrice();">
                        @Html.LabelFor(model => model.NeedsPrint, htmlAttributes: new { @class = "control-label col-sm-2 col-md-2 col-lg-2" })
                        <div class="col-sm-10 col-md-10 col-lg-10">
                            @Html.CheckBoxFor(model => model.NeedsPrint, htmlAttributes: new { @class = "form-control", @onchange = "checkandChange()" })
                            @Html.ValidationMessageFor(model => model.NeedsPrint, "", new { @class = "text-danger" })
                        </div>

                    </div>
                </div><br />
                <div class="alert alert-dismissible alert-info" id="PrintingHeadsUp" style="display: none;">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>Heads up! </strong>All printing is completed in full colour on 150gsm Gloss Paper. Please <input id="btnShow" type="button" class="btn btn-primary btn-xs" value="Click Here" style="display: none;" /> for a full list of Printing Requirements.
                </div>
                <div class="row">
                    <div class="col-sm-2 col-md-2 col-lg-2">
                        <p><input id="btnShow" type="button" class="btn btn-primary btn-sm" value="Print Requirements" style="display: none;" /></p>
                    </div>
                </div>
                <div class="modal" id="PrintInformation">
                    <div class="modal-dialog">
                        <div class="modal-content" style="max-width:500px;">
                            <div class="modal-header">
                                <span class="close" id="closePrint">&times;</span>
                                <h4 class="modal-title">Heads Up! Printing Format.</h4>
                            </div>
                            <div class="modal-body">
                                <div class="alert alert-dismissible alert-info">
                                    <ul>
                                        <li style="padding-left: 20px;"><strong>Accepted File Types</strong>: <a class="alert-link" href="https://acrobat.adobe.com/us/en/why-adobe/about-adobe-pdf.html" target="_blank">PDF </a>(version 1.4 or higher)</li>
                                        <li style="padding-left: 20px;">Artwork must be Print Ready</li>
                                        <li style="padding-left: 20px;">2mm Bleed on all sides of the flyer</li>
                                        <li style="padding-left: 20px;">3mm Safe Zone on all sides is recommended</li>
                                        <li style="padding-left: 20px;">300 dpi resolution for all images in&nbsp;<a class="alert-link" href="https://acrobat.adobe.com/us/en/why-adobe/about-adobe-pdf.html" target="_blank">PDF</a> files</li>
                                        <li style="padding-left: 20px;">CMYK or Grey Scale colours only</li>
                                        <li style="padding-left: 20px;">Fonts need to be embedded or converted to curves</li>
                                        <li style="padding-left: 20px;">We will transport the completed flyers to the distributor ready for delivery.</li>
                                    </ul>
                                </div>
                                <p class="alert alert-dismissible alert-danger"><strong>ALL FILES ARE PRINTED AS SUPPLIED TO US</strong></p>
                                <p class="alert alert-dismissible alert-info">
                                    Please attach below or use our <a class="alert-link" href="/Home/Contact" target="_blank">Contact Us</a> page.<br />
                                    Thank you
                                </p>

                            </div>

                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="form-group" id="PrintSize1" style="display: none;" onclick="QuotePrice.SetQuotePrice();">
                        @Html.LabelFor(model => model.PrintSize, htmlAttributes: new { @class = "control-label col-sm-2 col-md-2 col-lg-2", @title = "Choose DL (99mm × 210mm, 1/3 A4) or A5 (148mm X 210mm, 1/2 A4). For other sizes please contact us for a quote." })
                        <div class="col-sm-10 col-md-10 col-lg-10">
                            @Html.EnumDropDownListFor(model => model.PrintSize, "-Please select-", htmlAttributes: new { @class = "form-control", @onchange = "checkandChange()", @title = "Choose DL (99mm × 210mm, 1/3 A4) or A5 (148mm X 210mm, 1/2 A4). For other sizes please contact us for a quote." })
                            <span class="error" style="display:none;" id="PrintSize-error" for="PrintSize">
                            </span>
                        </div>
                    </div>
                </div><br />

                <div class="row ">
                    <div class="form-group" id="PrintFormat" style="display: none;" onclick="QuotePrice.SetQuotePrice();">
                        @Html.LabelFor(model => model.PrintFormat, htmlAttributes: new { @class = "control-label col-sm-2 col-md-2 col-lg-2", @title = "Leave ticked if you would like to print on both sides. Untick for only one sided printing." })
                        <div class="col-sm-10 col-md-10 col-lg-10">
                            @Html.CheckBoxFor(model => model.IsDoubleSided, htmlAttributes: new { @checked = true, @class = "form-control", @onchange = "checkandChange()", @title = "Leave ticked if you would like to print on both sides. Untick for only one sided printing." })
                            @Html.ValidationMessageFor(model => model.IsDoubleSided, "", new { @class = "text-danger" })<br /><br />
                        </div>
                    </div>

                </div><br />

                <div class="row ">
                    <div class="form-group" id="Attachment" style="display: none;">
                        @Html.LabelFor(model => model.Attachment, htmlAttributes: new { @class = "control-label col-sm-2 col-md-2 col-lg-2", @title = "Attach your file here. Please see file guidelines for requirements." })
                        <div class="col-sm-10 col-md-10 col-lg-10">
                            @Html.TextBoxFor(model => model.Attachment, new { type = "file", multiple = "true", Placeholder = "Attach Files" })

                        </div>
                    </div>

                </div><br /><br />


                <div class="row">
                    <div class="col-sm-2 col-md-2 col-lg-2">
                        <label>Your quote price: </label>
                    </div>
                    <div class="col-sm-10 col-md-10 col-lg-10">
                        <label id="quotePrice" title="Minimum Order of $400"></label><br /><p style="font-size:x-small">(All prices include GST)</p>
                        @Html.HiddenFor(model => model.Cost)
                    </div><br /><br />
                </div>

                <div class="col-sm-offset-2 col-md-offset-2 col-lg-offset-2">
                    <script id="initialButtonClick" src="https://checkout.stripe.com/checkout.js"></script>

                    <input type="button" name="customButton" id="customButton" value="Pay by Card" class="btn btn-success" style="background-color:#7FFF00" />
                    <input type="hidden" value="" name="token1" id="token1" />
                    <input type="button" name="directDebitEmail" id="directDebitEmail" value="Pay by Direct Debit" class="btn btn-success" style="background-color:#7FFF00" />
                    <input type="hidden" value="" name="hdndirectDebitEmail" id="hdndirectDebitEmail" />
                </div>
            </div>
        </div>
        <div class="col-sm-4 col-md-4 col-lg-4">
            <p></p><p></p>
            <p class="full-circle"></p><br />
            <p class="full-circle-med col-sm-offset-4 col-md-offset-4 col-lg-offset-4"></p><br />
            <p class="full-circle-sm"></p>
            <img class="img-responsive" style="max-height:300px" src="~/Content/Images/Flyers.jpg" alt="logo" />
        </div>

    </div>
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <link rel="stylesheet" href="~/Content/bootstrap-theme.css" />


    <script>
        // Get the modal
        var modal = document.getElementById('PrintInformation');
        var modal2 = document.getElementById('DeliveryDateInfo');
        // Get the button that opens the modal
        var btn = document.getElementById("btnShow");
        var btn2 = document.getElementById("btnShowDate");
        // Get the <span> element that closes the modal
        var span = document.getElementById("closePrint");
        var span2 = document.getElementById("closeDeliveryDate");
        // When the user clicks the button, open the modal
        btn.onclick = function () {
            modal.style.display = "block";
        }
        btn2.onclick = function () {
            modal2.style.display = "block";
        }
        // When the user clicks on <span> (x), close the modal
        span.onclick = function () {
            modal.style.display = "none";
        }
        span2.onclick = function () {
            modal2.style.display = "none";
        }

        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
            if (event.target == modal2) {
                modal2.style.display = "none";
            }
        }
    </script>
    <script>

        var handler = StripeCheckout.configure({
            key: '@SGFastFlyers.Utility.Config.stripeKey',
            image: 'https://stripe.com/img/documentation/checkout/marketplace.png',
            locale: 'auto',
            token: function (token) {
                document.getElementById("token1").value = token.id;
                // alert(token.id);
                document.forms[0].submit();
                return true;
                // You can access the token ID with `token.id`.
                // Get the token ID to your server-side code for use.
            }
        });

        function validatePrintSize() {
            if ($("#NeedsPrint").is(':checked') && ($("#PrintSize").val() == "" || $("#PrintSize").val() == 0)) {
                $('#PrintSize-error').css("display", "block");
                $('#PrintSize-error').text("Choose DL (99mm × 210mm, 1/3 A4) or A5 (148mm X 210mm, 1/2 A4). For other sizes please contact us for a quote.");
                return false;
            } else {
                $('#PrintSize-error').css("display", "none");
                $("#PrintSize-error").text("");
                return true;
            }
        }

        document.getElementById('customButton').addEventListener('click', function (e) {
            $("#hdndirectDebitEmail").val();
            var flag = false;

            var $form = $('form');
            if ($form.valid()) {
                if (!validatePrintSize()) {
                    flag = true;
                    return false;
                }
            } else {
                if (!validatePrintSize()) {
                    return false;
                }
                return false;
            }

            // Open Checkout with further options:
            var thisEmail = document.getElementById("EmailAddress");
            var amounbt = QuotePrice.SetQuotePrice();
            amounbt = amounbt.replace(/\./gi, "");
            amounbt = amounbt.replace(/\$/gi, "");
            amounbt = amounbt.replace(/\,/gi, "");

            handler.open({
                name: 'Smooth Glass Pty Ltd',
                description: 'Secure Payment Gateway',
                currency: 'aud',
                email: thisEmail.value,
                image: "/Content/Images/logo.jpg",
                amount: parseInt(amounbt)
            });
            e.preventDefault();

        }, true);

        // Close Checkout on page navigation:
        window.addEventListener('popstate', function () {
            handler.close();
        });

        document.getElementById('directDebitEmail').addEventListener('click', function (e) {
            $("#token1").val();
            var flag = false;

            var $form = $('form');
            if ($form.valid()) {
                if (!validatePrintSize()) {
                    flag = true;
                    return false;
                }
            } else {
                if (!validatePrintSize()) {
                    return false;
                }
            }
            $("#hdndirectDebitEmail").val(true);
            $('#OrdersForm').submit();
        }, true);
    </script>

            <script type="text/javascript">

                $(function () {
                    $('input').keydown(function (e) {
                        if (e.keyCode == 13) {
                            $("input[value='emailQuote']").focus();
                            return false;
                        }
                    });
                });
            </script>
            <script type="text/javascript">
                function checkandChange() {
                    var checkbox = document.getElementById('NeedsPrint');
                    var dependent = $('#PrintSize1');
                    var dependent2 = $('#PrintFormat');
                    var dependent3 = $('#Attachment');
                    var printInformation = $('#btnShow');
                    var printDetails = $('#PrintingHeadsUp')
                    if (checkbox.checked) {
                        dependent.show();
                        dependent2.show();
                        dependent3.show();
                        printInformation.show();
                        printDetails.show();
                    }
                    else {
                        dependent.hide();
                        dependent2.hide();
                        dependent3.hide();
                        printInformation.hide();
                        printDetails.hide();
                    }
                }

                $(document).ready(function () {
                    checkandChange();
                });
            </script>
                <script src="~/Scripts/Custom/quoteprice.js"></script>
                <script type="text/javascript">
                    window.onload = QuotePrice.SetQuotePrice();
                </script>
                <script type="text/javascript">
                    $(document).ready(function () {
                        $('input[type=datetime]').datepicker({
                            dateFormat: "yy-mm-dd",
                            daysOfWeekDisabled: "0,1,2,3,4,5",
                            daysOfWeekHighlighted: "6",
                            changeMonth: true,
                            changeYear: true,
                            yearRange: "-0:+5",
                            beforeShowDay: function (date) {
                                if (date.getDay() == 6) {
                                    return [true];
                                } else {
                                    return [false];
                                }
                            },
                            minDate: "0 +8D"
                        });


                        $.validator.addMethod('date',
                            function (value, element) {
                                if (this.optional(element)) {
                                    return true;
                                }
                                var ok = true;
                                try {
                                    $.datepicker.parseDate('yy-mm-dd', value);
                                }
                                catch (err) {
                                    ok = false;
                                }
                                return ok;
                            });
                    });

                </script>
                    <script>
                        $(document).ready(function () {
                            $('[data-toggle="popover"]').popover({
                                html: true,
                                content: function () {
                                    return $('#popover-content').html();
                                }
                            });

                            $('.forLinks').on('shown.bs.popover', function () {
                                var element = $('.popover'),
                                    style = window.getComputedStyle(element[0]),
                                    left = style.getPropertyValue('left');
                                var leftValue = left.replace("px", "");
                                $('.popover').css('left', parseInt(leftValue) - 5);
                            });

                            $('body').on('click', function (e) {
                                $('[data-toggle=popover]').each(function () {
                                    // hide any open popovers when the anywhere else in the body is clicked
                                    if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').length != 0) {
                                        $('.forLinks').trigger('click');
                                    }
                                });
                            });

                        });
                    </script>

                    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
                    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
                    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
                    <script>

                        var deliveryAreaCache = {};
                        var pcodes = [];
                        var tunits = [];
                        var objectData = {};
                        var terms = [];

                        $(document).ready(function() {
                            BindDeliveryAreaControls();
                            ResetDeliveryAreaControls();

                            $("#DeliveryArea").bind("keydown", function (event) {
                                if (event.keyCode === $.ui.keyCode.TAB &&
                                $(this).data("autocomplete").menu.active) {
                                    event.preventDefault();
                                }
                            });

                            $("#DeliveryArea").bind("keyup", function (e) {
                                $('.ui-autocomplete-input').autocomplete('option', 'minLength', this.value.length);
                            });

                            $("#postCodes").on("click", "a.search-choice-close", function (e) {
                                var rmTotal = 0;
                                if (parseInt($("#totalUnits").text()) > 0) {
                                    var pc = $(this).attr('data-pincode');
                                    rmTotal = parseInt($("#totalUnits").text()) - objectData[pc];
                                    $("#totalUnits").empty();
                                    $("#totalUnits").append(rmTotal);
                                    $('ul.chosen-choices li#' + pc).remove();

                                    if ($("#DeliveryArea").val() != "" && $("#DeliveryArea").val() != null) {
                                        var toSplit = terms.toString().split(",");
                                        $.each(toSplit, function (i, v) {
                                            if (toSplit[i].trim() != "" && toSplit[i].trim() != null) {
                                                var lastFour = toSplit[i].substr(toSplit[i].length - 4);
                                                if (pc == lastFour) {
                                                    terms.splice(i, 1);
                                                    terms.join(", ");
                                                }
                                            }
                                        });
                                        $("#DeliveryArea").val(terms);
                                    }

                                    delete objectData[pc];
                                }
                            });
                        });


                        function ResetDeliveryAreaControls() {
                            $("#resetDeliveryArea").click(function () {
                                $("#DeliveryArea").val("");
                                $('.ui-autocomplete-input').autocomplete('option', 'minLength', 4);
                                $("#postCodes").empty();
                                $("#totalUnits").empty();
                               
                                objectData = {};
                                $("#distributionListing").hide();
                            });
                        }

                        function BindDeliveryAreaControls() {
                            $("#DeliveryArea").autocomplete({
                                source: function (request, response) {
                                    var param = { searchTerm: extractLast($('#DeliveryArea').val()) };
                                   
                                    $.ajax({
                                        url: '@Url.Action("GetDistributionList")',
                                        dataType: "json",
                                        type: "POST",
                                        contentType: 'application/json; charset=utf-8',
                                        cache: true,
                                        data: JSON.stringify(param),
                                        success: function (data) {
                                            if (data.success) {
                                                response($.map(data.DistributionModel.DistributionList, function (item) {
                                                    return {
                                                        label: item.DeliveryArea, value: item.DeliveryArea
                                                    }
                                                }))
                                            }
                                        },
                                        error: function (xhr) {
                                            $('.ui-autocomplete-loading').removeClass("ui-autocomplete-loading");
                                        }
                                    });
                                },
                                minLength: 4,
                                focus: function () {
                                    // prevent value inserted on focus when navigating the drop down list
                                    return false;
                                },
                                select: function (event, ui) {
                                    terms = split(this.value);
                                    terms.pop();
                                    terms.push(ui.item.label);
                                    terms.push("");
                                    this.value = terms.join(", ");

                                    var currentValue = this.value;
                                
                                    $("#spinner").show();
                                    $("#postCodes").empty();
                                    $("#totalUnits").empty();

                                    var param = { searchTerm: ui.item.label };
                                    $.ajax({
                                        url: "@(Url.Action("GetTotalUnits", "Orders"))",
                                        type: "POST",
                                        dataType: "json",
                                        contentType: 'application/json; charset=utf-8',
                                        data: JSON.stringify(param),
                                        cache: true,
                                        success: function (data) {
                                            if (data.success) {
                                                $("#distributionListing").show();
                                                if ((data.postcodes !== "" && data.postcodes !== null) && (data.totalUnits !== "" && data.totalUnits !== null)) {
                                                    
                                                    var total = 0;
                                                    objectData[data.postcodes] = data.totalUnits;
                                                    
                                                    var list = $("<ul class='chosen-choices'/>").appendTo('#postCodes');                                                   
                                                    $.each(objectData, function (key, value) {
                                                        list.append(" <li class='search-choice' id='" + key + "'><span>" + key + "</span><a class='search-choice-close' data-pincode='" + key + "'></a></li>");
                                                        total += objectData[key];
                                                    });
                                                    
                                                    $("#totalUnits").append(total);

                                                    var dynamicMinLength = currentValue.length + 4;
                                                    $('.ui-autocomplete-input').autocomplete('option', 'minLength', dynamicMinLength);
                                                }

                                                if(data.country) {
                                                    $("#IsMetro").prop('checked', false);
                                                } else {
                                                    $("#IsMetro").prop('checked', true);
                                                }
                                                $("#spinner").hide();
                                            }
                                        },
                                        error: function (xhr, ajaxOptions, thrownError) {
                                        }
                                    });
                                    return false;
                                }
                            });
                        }

                        

                        function split(val) {
                            return val.split(/,\s*/);
                        }

                        function extractLast(term) {
                            return split(term).pop();
                        }

                        function removeSelectedPinCodes(removeItem) {
                            pcodes = jQuery.grep(pcodes, function (value) {
                                return value != removeItem;
                            });
                        }

                        
                    </script>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
